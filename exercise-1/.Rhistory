install.packages("httr")
install.packages("jsonlite")
# Exercise 1: reading and querying a web API
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Exercise 5: dplyr grouped operations
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
# install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(avg_delay = mean(dep_delay, na.rm = T))
# Which month had the greatest average departure delay?
greateast_avg_dep_delay <- dep_delay_by_month %>%
filter(avg_delay == max(avg_delay)) %>%
select(month)
# If your above data frame contains just two columns
# (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
highest_arr_delay <- flights %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = T)) %>%
arrange(-avg_arr_delay)
head(highest_arr_delay)
# You can look up these airports in the `airports` data frame!
# Which city was flown to with the highest average speed?
city_highest_speed <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
print(city_highest_speed)
library("lintr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
# Function to debug:
# Given a number of forward gears and a number of cylinders, what is the
# Name of the car with the best mpg?
vehicles <- mtcars %>% mutate(name = row.names(mtcars))
BestGearsCyl <- functon(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mgp = max(mpg)) %>%
select(car)
}
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
View(vehicles)
BestGearsCyl <- function(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mgp = max(mpg)) %>%
select(car)
}
answer
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
# Function to debug:
# Given a number of forward gears and a number of cylinders, what is the
# Name of the car with the best mpg?
vehicles <- mtcars %>% mutate(name = row.names(mtcars))
BestGearsCyl <- function(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mgp == max(mpg)) %>%
select(car)
}
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
# Function to debug:
# Given a number of forward gears and a number of cylinders, what is the
# Name of the car with the best mpg?
vehicles <- mtcars %>% mutate(name = row.names(mtcars))
BestGearsCyl <- function(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mgp == max(mpg)) %>%
select(name)
}
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
vehicles <- mtcars %>% mutate(name = row.names(mtcars))
BestGearsCyl <- function(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mpg == max(mpg)) %>%
select(name)
}
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(4, 6)
# Exercise 1: reading and querying a web API
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resources <- "/orgs/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
uri_full <- paste0(base_uri, resources)
response <- GET(uri_full)
# Extract the "text" of the response usin the `content` function
response_content <- content(response, "text")
# Convert the body from JSON into a data frame
info201_repo <- fromJSON(response_content)
info201_repo
# How many (public) repositories does the organization have?
print(nrow(info201_repo))
View(info201_repo)
